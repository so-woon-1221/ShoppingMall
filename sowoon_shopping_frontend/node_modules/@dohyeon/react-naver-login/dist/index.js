'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');

var NAVER_SCRIPT_SRC = 'https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.0.js';

var createScript = function createScript(src) {
  return new Promise(function (resolve, reject) {
    if (document.getElementById("async_script" + src)) {
      return reject();
    }

    var script = document.createElement('script');
    script.id = "async_script_" + src;
    script.src = src;
    script.addEventListener('load', function () {
      return resolve(script.id);
    });
    script.addEventListener('error', function (response) {
      return reject(response);
    });
    document.body.appendChild(script);
  });
};

var useNaverLogin = function useNaverLogin(_a) {
  var _b;

  var clientId = _a.clientId,
      callbackUrl = _a.callbackUrl,
      isPopup = _a.isPopup,
      _c = _a.loginButton,
      loginButton = _c === void 0 ? {
    color: "green",
    type: 2,
    height: 42
  } : _c,
      _d = _a.callbackHandle,
      callbackHandle = _d === void 0 ? true : _d;

  if (!('browser' in process)) {
    return null;
  }

  var _e = React.useState(((_b = window === null || window === void 0 ? void 0 : window.naver) === null || _b === void 0 ? void 0 : _b.LoginWithNaverId) ? true : false),
      isLoadedScript = _e[0],
      setIsLoadedScript = _e[1];

  var naverLoginInit = React.useCallback(function () {
    if (isLoadedScript) {
      var naverLogin = new window.naver.LoginWithNaverId({
        clientId: clientId,
        callbackUrl: callbackUrl,
        isPopup: isPopup,
        loginButton: loginButton,
        callbackHandle: callbackHandle
      });
      naverLogin.init();
      return naverLogin;
    }

    return null;
  }, [isLoadedScript]);
  React.useEffect(function () {
    if (!isLoadedScript) {
      createScript(NAVER_SCRIPT_SRC).then(function () {
        setIsLoadedScript(true);
      });
    }
  }, [isLoadedScript]);
  return {
    loading: !isLoadedScript,
    naverLoginInit: naverLoginInit
  };
};

var e = [],
    t = [];

function n(n, r) {
  if (n && "undefined" != typeof document) {
    var a,
        s = !0 === r.prepend ? "prepend" : "append",
        d = !0 === r.singleTag,
        i = "string" == typeof r.container ? document.querySelector(r.container) : document.getElementsByTagName("head")[0];

    if (d) {
      var u = e.indexOf(i);
      -1 === u && (u = e.push(i) - 1, t[u] = {}), a = t[u] && t[u][s] ? t[u][s] : t[u][s] = c();
    } else a = c();

    65279 === n.charCodeAt(0) && (n = n.substring(1)), a.styleSheet ? a.styleSheet.cssText += n : a.appendChild(document.createTextNode(n));
  }

  function c() {
    var e = document.createElement("style");
    if (e.setAttribute("type", "text/css"), r.attributes) for (var t = Object.keys(r.attributes), n = 0; n < t.length; n++) {
      e.setAttribute(t[n], r.attributes[t[n]]);
    }
    var a = "prepend" === s ? "afterbegin" : "beforeend";
    return i.insertAdjacentElement(a, e), e;
  }
}

var css = "\r\n.hide {\r\n  width: 0;\r\n  height: 0;\r\n  overflow: hidden;\r\n  opacity: 0;\r\n}\r\n";
n(css, {});

var NaverLogin = function NaverLogin(_a) {
  var clientId = _a.clientId,
      callbackUrl = _a.callbackUrl,
      _b = _a.loginButton,
      loginButton = _b === void 0 ? {
    color: "green",
    type: 2,
    height: 42
  } : _b,
      isPopup = _a.isPopup,
      _c = _a.callbackHandle,
      callbackHandle = _c === void 0 ? true : _c,
      children = _a.children;

  if (!('browser' in process)) {
    return null;
  }

  var buttonRef = React.useRef(null);

  var _d = useNaverLogin({
    clientId: clientId,
    callbackUrl: callbackUrl,
    loginButton: loginButton,
    isPopup: isPopup,
    callbackHandle: callbackHandle
  }) || {},
      naverLoginInit = _d.naverLoginInit,
      loading = _d.loading;

  React.useEffect(function () {
    if (!loading && buttonRef.current) {
      naverLoginInit && naverLoginInit();
    }
  }, [loading, buttonRef]);
  return React.createElement(React.Fragment, null, children && React.createElement(React.Fragment, null, React.createElement("div", {
    onClick: function onClick() {
      var current = buttonRef.current;

      if (current !== null) {
        var a = current.querySelector('a');
        if (a) a.click();
      }
    }
  }, children)), React.createElement("div", {
    className: children ? 'hide' : ''
  }, React.createElement("div", {
    id: "naverIdLogin",
    ref: buttonRef
  })));
};

NaverLogin.displayName = 'NaverLogin';
var NaverLogin$1 = React.memo(NaverLogin);
exports["default"] = NaverLogin$1;
exports.useNaverLogin = useNaverLogin;
//# sourceMappingURL=index.js.map
