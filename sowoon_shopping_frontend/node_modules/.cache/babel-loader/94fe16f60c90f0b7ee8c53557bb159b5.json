{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as registerAPI from '../lib/api/login';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'register/INITIALIZE';\nconst CHANGE_FIELD = 'register/CHANGE_FIELD';\nconst [REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE] = createRequestActionTypes('register/REGISTER_USER');\nconst [REGISTER_CHECK, REGISTER_CHECK_SUCCESS, REGISTER_CHECK_FAILURE] = createRequestActionTypes('register/REGISTER_CHECK');\nexport const initialize = createAction(INITIALIZE);\nexport const registerUser = createAction(REGISTER_USER, ({\n  name,\n  email,\n  image,\n  password\n}) => ({\n  name,\n  email,\n  image,\n  password\n}));\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const registerCheck = createAction(REGISTER_CHECK, ({\n  email\n}) => ({\n  email\n}));\nconst registerUserSaga = createRequestSaga(REGISTER_USER, registerAPI.registerUser);\nexport function* registerSaga() {\n  yield takeLatest(REGISTER_USER, registerUserSaga);\n}\nconst registerCheckSaga = createRequestSaga(REGISTER_CHECK, registerAPI.registerCheck);\nexport function* checkSaga() {\n  yield takeLatest(REGISTER_CHECK, registerCheckSaga);\n}\nconst initialState = {\n  name: '',\n  email: '',\n  image: '',\n  password: '',\n  check: '',\n  user: '',\n  userError: null\n};\nconst register = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => ({ ...state,\n    [key]: value\n  }),\n  [REGISTER_USER]: state => ({ ...state,\n    user: ''\n  }),\n  [REGISTER_USER_SUCCESS]: (state, {\n    payload: user\n  }) => ({ ...state,\n    user\n  }),\n  [REGISTER_USER_FAILURE]: (state, {\n    payload: userError\n  }) => ({ ...state,\n    userError\n  }),\n  [REGISTER_CHECK]: state => ({ ...state,\n    check: ''\n  })\n}, initialState);\nexport default register;","map":{"version":3,"sources":["/Users/sowoon/Develop/shopping/sowoon_shopping_frontend/src/modules/register.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","registerAPI","takeLatest","INITIALIZE","CHANGE_FIELD","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","REGISTER_CHECK","REGISTER_CHECK_SUCCESS","REGISTER_CHECK_FAILURE","initialize","registerUser","name","email","image","password","changeField","key","value","registerCheck","registerUserSaga","registerSaga","registerCheckSaga","checkSaga","initialState","check","user","userError","register","state","payload"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as registerAPI from '../lib/api/login';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'register/INITIALIZE';\nconst CHANGE_FIELD = 'register/CHANGE_FIELD';\nconst [\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILURE,\n] = createRequestActionTypes('register/REGISTER_USER');\nconst [\n  REGISTER_CHECK,\n  REGISTER_CHECK_SUCCESS,\n  REGISTER_CHECK_FAILURE,\n] = createRequestActionTypes('register/REGISTER_CHECK');\n\nexport const initialize = createAction(INITIALIZE);\nexport const registerUser = createAction(\n  REGISTER_USER,\n  ({ name, email, image, password }) => ({ name, email, image, password }),\n);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const registerCheck = createAction(REGISTER_CHECK, ({ email }) => ({\n  email,\n}));\n\nconst registerUserSaga = createRequestSaga(\n  REGISTER_USER,\n  registerAPI.registerUser,\n);\nexport function* registerSaga() {\n  yield takeLatest(REGISTER_USER, registerUserSaga);\n}\nconst registerCheckSaga = createRequestSaga(\n  REGISTER_CHECK,\n  registerAPI.registerCheck,\n);\nexport function* checkSaga() {\n  yield takeLatest(REGISTER_CHECK, registerCheckSaga);\n}\n\nconst initialState = {\n  name: '',\n  email: '',\n  image: '',\n  password: '',\n  check: '',\n  user: '',\n  userError: null,\n};\n\nconst register = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [REGISTER_USER]: (state) => ({\n      ...state,\n      user: '',\n    }),\n    [REGISTER_USER_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [REGISTER_USER_FAILURE]: (state, { payload: userError }) => ({\n      ...state,\n      userError,\n    }),\n    [REGISTER_CHECK]: (state) => ({ ...state, check: '' }),\n  },\n  initialState,\n);\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}