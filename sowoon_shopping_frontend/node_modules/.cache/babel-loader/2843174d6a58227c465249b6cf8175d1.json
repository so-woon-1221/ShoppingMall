{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as registerAPI from '../lib/api/login';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'register/INITIALIZE';\nconst [REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE] = createRequestActionTypes('register/REGISTER_USER');\nexport const initialize = createAction(INITIALIZE);\nexport const registerUser = createAction(REGISTER_USER, ({\n  name,\n  email,\n  image,\n  password\n}) => ({\n  name,\n  email,\n  image,\n  password\n}));\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nconst registerUserSaga = createRequestSaga(REGISTER_USER, registerAPI.registerUser);\nexport function* registerSaga() {\n  yield takeLatest(REGISTER_USER, registerSaga);\n}\nconst initialState = {\n  name: '',\n  email: '',\n  image: '',\n  password: '',\n  user: '',\n  userError: null\n};\nconst register = handleActions({\n  [INITIALIZE]: state => initialState,\n  [REGISTER_USER]: state => ({ ...state,\n    user: ''\n  }),\n  [REGISTER_USER_SUCCESS]: (state, {\n    payload: user\n  }) => ({ ...state,\n    user\n  }),\n  [REGISTER_USER_FAILURE]: (state, {\n    payload: userError\n  }) => ({ ...state,\n    userError\n  })\n}, initialState);\nexport default register;","map":{"version":3,"sources":["/Users/sowoon/Develop/shopping/sowoon_shopping_frontend/src/modules/register.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","registerAPI","takeLatest","INITIALIZE","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","initialize","registerUser","name","email","image","password","changeField","CHANGE_FIELD","key","value","registerUserSaga","registerSaga","initialState","user","userError","register","state","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,UAAU,GAAG,qBAAnB;AACA,MAAM,CACJC,aADI,EAEJC,qBAFI,EAGJC,qBAHI,IAIFN,wBAAwB,CAAC,wBAAD,CAJ5B;AAMA,OAAO,MAAMO,UAAU,GAAGV,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMK,YAAY,GAAGX,YAAY,CACtCO,aADsC,EAEtC,CAAC;AAAEK,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,MAAuC;AAAEH,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAvC,CAFsC,CAAjC;AAIP,OAAO,MAAMC,WAAW,GAAGhB,YAAY,CAACiB,YAAD,EAAe,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAKP,MAAMC,gBAAgB,GAAGlB,iBAAiB,CACxCK,aADwC,EAExCH,WAAW,CAACO,YAF4B,CAA1C;AAIA,OAAO,UAAUU,YAAV,GAAyB;AAC9B,QAAMhB,UAAU,CAACE,aAAD,EAAgBc,YAAhB,CAAhB;AACD;AAED,MAAMC,YAAY,GAAG;AACnBV,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,QAAQ,EAAE,EAJS;AAKnBQ,EAAAA,IAAI,EAAE,EALa;AAMnBC,EAAAA,SAAS,EAAE;AANQ,CAArB;AASA,MAAMC,QAAQ,GAAGxB,aAAa,CAC5B;AACE,GAACK,UAAD,GAAeoB,KAAD,IAAWJ,YAD3B;AAEE,GAACf,aAAD,GAAkBmB,KAAD,KAAY,EAC3B,GAAGA,KADwB;AAE3BH,IAAAA,IAAI,EAAE;AAFqB,GAAZ,CAFnB;AAME,GAACf,qBAAD,GAAyB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,MAA+B,EACtD,GAAGG,KADmD;AAEtDH,IAAAA;AAFsD,GAA/B,CAN3B;AAUE,GAACd,qBAAD,GAAyB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAAoC,EAC3D,GAAGE,KADwD;AAE3DF,IAAAA;AAF2D,GAApC;AAV3B,CAD4B,EAgB5BF,YAhB4B,CAA9B;AAmBA,eAAeG,QAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as registerAPI from '../lib/api/login';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'register/INITIALIZE';\nconst [\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILURE,\n] = createRequestActionTypes('register/REGISTER_USER');\n\nexport const initialize = createAction(INITIALIZE);\nexport const registerUser = createAction(\n  REGISTER_USER,\n  ({ name, email, image, password }) => ({ name, email, image, password }),\n);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nconst registerUserSaga = createRequestSaga(\n  REGISTER_USER,\n  registerAPI.registerUser,\n);\nexport function* registerSaga() {\n  yield takeLatest(REGISTER_USER, registerSaga);\n}\n\nconst initialState = {\n  name: '',\n  email: '',\n  image: '',\n  password: '',\n  user: '',\n  userError: null,\n};\n\nconst register = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState,\n    [REGISTER_USER]: (state) => ({\n      ...state,\n      user: '',\n    }),\n    [REGISTER_USER_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [REGISTER_USER_FAILURE]: (state, { payload: userError }) => ({\n      ...state,\n      userError,\n    }),\n  },\n  initialState,\n);\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}